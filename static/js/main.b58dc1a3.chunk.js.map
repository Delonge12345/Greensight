{"version":3,"sources":["components/Switch/Switch.module.css","redux/redux-store.js","components/Switch/Switch.js","components/withSuspense/withSuspense.js","App.js","serviceWorker.js","index.js","App.module.css"],"names":["module","exports","reducers","combineReducers","form","formReducer","map","mapReducer","store","createStore","applyMiddleware","thunkMiddleware","window","Switch","className","style","nav","navLinkPosition","navLinkA","to","activeClassName","activeLink","withSuspense","Component","props","Suspense","fallback","PickUp","React","lazy","Delivery","App","appWrap","container","wraps","switch","mainContent","path","render","Boolean","location","hostname","match","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,IAAM,oBAAoB,gBAAkB,gCAAgC,SAAW,yBAAyB,WAAa,6B,qGCQ3IC,EAAWC,YAAgB,CAC9BC,KAAKC,IACLC,IAAIC,eAMDC,EAAQC,YAAYP,EAASQ,YAAgBC,MAEjDC,OAAOJ,MAAQA,EAEAA,Q,2DCEAK,EAfA,WACd,OACC,yBAAKC,UAAWC,IAAMC,KAErB,yBAAKF,UAAWC,IAAME,iBACrB,yBAAKH,UAAWC,IAAMG,UAAU,kBAAC,IAAD,CAASC,GAAG,YAAWC,gBAAiBL,IAAMM,YAA9C,qDAEhC,yBAAKP,UAAWC,IAAMG,UAAU,kBAAC,IAAD,CAASC,GAAG,UAASC,gBAAiBL,IAAMM,YAA5C,8D,QCNpBC,EAAe,SAACC,GAC7B,OAAO,SAACC,GACR,OAAO,kBAAC,IAAMC,SAAP,CAAgBC,SAAU,4CACjC,kBAACH,EAAcC,MCLZG,EAASC,IAAMC,MAAK,kBAAM,8DAC1BC,EAAWF,IAAMC,MAAK,kBAAM,8DA0BnBE,EAtBH,SAACP,GAGZ,OAAO,yBAAKV,UAAWC,IAAMiB,SAC5B,yBAAMlB,UAAWC,IAAMkB,WACtB,6BACC,yBAAKnB,UAAWC,IAAMmB,OAAO,uKAC7B,yBAAKpB,UAAWC,IAAMoB,QAAQ,kBAAC,EAAD,OAE7B,yBAAKrB,UAAWC,IAAMqB,aAErB,kBAAC,IAAD,CAAOC,KAVE,YAWLC,OAAQhB,EAAaQ,KACzB,kBAAC,IAAD,CAAOO,KAXE,UAYLC,OAAQhB,EAAaK,UCdXY,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACvB,2D,YCDNC,IAASL,OACR,kBAAC,IAAD,CAAYM,SAAUC,eACrB,kBAAC,IAAD,CAAUrC,MAASA,GAClB,kBAAC,EAAD,CACCA,MAAOA,MAEKsC,SAASC,eAAe,SD0GlC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBElInBrD,EAAOC,QAAU,CAAC,QAAU,qBAAqB,YAAc,yBAAyB,OAAS,oBAAoB,UAAY,yB","file":"static/js/main.b58dc1a3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Switch_nav__3GOzQ\",\"navLinkPosition\":\"Switch_navLinkPosition__2Dkbu\",\"navLinkA\":\"Switch_navLinkA__1jMmh\",\"activeLink\":\"Switch_activeLink__kKzBt\"};","/**\n * Created by Максим on 03.12.2019.\n */\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport {reducer as formReducer} from 'redux-form'\nimport {mapReducer} from \"./MapReducer\";\n\n\nlet reducers = combineReducers({\n\tform:formReducer,\n\tmap:mapReducer\n})\n\n\n\n\nlet store = createStore(reducers,applyMiddleware(thunkMiddleware));\n\nwindow.store = store;\n\nexport default store;","/**\n * Created by Максим on 04.12.2019.\n */\nimport React from 'react';\nimport style from './Switch.module.css'\nimport {NavLink} from \"react-router-dom\";\n\n\nconst Switch = () => {\n\treturn (\n\t\t<nav className={style.nav}>\n\n\t\t\t<div className={style.navLinkPosition}>\n\t\t\t\t<div className={style.navLinkA}><NavLink to='/delivery'activeClassName={style.activeLink}>Доставка</NavLink></div>\n\n\t\t\t\t<div className={style.navLinkA}><NavLink to='/pickup'activeClassName={style.activeLink}>Самовывоз</NavLink></div>\n\t\t\t</div>\n\n\n\n\t\t</nav>\n\t)\n}\nexport default Switch;","\n\n/**\n * Created by Максим on 09.12.2019.\n */\nimport React from 'react';\n\n\n\n\t\t\texport const withSuspense = (Component) => {\n\t\t\treturn (props) => {\n\t\t\treturn <React.Suspense fallback={<div>loading...</div>} >\n\t\t\t<Component {...props} />\n\t\t\t</React.Suspense>\n\t\t};\n\t\t}","import React from 'react';\nimport style from './App.module.css';\nimport Switch from \"./components/Switch/Switch\";\nimport {Route} from \"react-router-dom\";\nimport {withSuspense} from \"./components/withSuspense/withSuspense\";\n\n\nconst PickUp = React.lazy(() => import('./components/Pickup/Pickup'));\nconst Delivery = React.lazy(() => import('./components/Delivery/Delivery'));\n\n\n\nconst App = (props) => {\n\tconst path1 = '/delivery';\n\tconst path2 = '/pickup';\n\treturn <div className={style.appWrap}>\n\t\t<div  className={style.container}>\n\t\t\t<div>\n\t\t\t\t<div className={style.wraps}><h2>Выберите способ доставки</h2></div>\n\t\t\t\t<div className={style.switch}><Switch/></div>\n\t\t\t\t{\n\t\t\t\t\t<div className={style.mainContent}>\n\n\t\t\t\t\t\t<Route path={path1}\n\t\t\t\t\t\t\t\t\t render={withSuspense(Delivery)}/>\n\t\t\t\t\t\t<Route path={path2}\n\t\t\t\t\t\t\t\t\t render={withSuspense(PickUp)}/>\n\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</div>\n\t\t</div>\n\t</div>\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport './index.css';\nimport store, {subscribe} from\"./redux/redux-store\"\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {HashRouter} from \"react-router-dom\";\n\n\n\n\n\n\n\n\nReactDOM.render(\n\t<HashRouter basename={process.env.PUBLIC_URL}>\n\t\t<Provider store = {store}>\n\t\t\t<App\n\t\t\t\tstore={store}/>\n\t\t</Provider>\n\t</HashRouter>, document.getElementById('root'));\n\n\n\n\n\n\n\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrap\":\"App_appWrap__YxgAn\",\"mainContent\":\"App_mainContent__kTocx\",\"switch\":\"App_switch__38-V0\",\"container\":\"App_container__37NQP\"};"],"sourceRoot":""}